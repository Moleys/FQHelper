name: Build Android APK

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*', 'release-*' ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      # Change this if you want to pin another libxposed api version
      LIBXPOSED_API_VERSION: "100"
      # Insecure demo keystore credentials (do NOT use for production)
      KEYSTORE_PASSWORD: "android-ci-pass"
      KEY_ALIAS: "ci-release"
      KEY_PASSWORD: "android-ci-pass"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install required SDK packages (API 33, Build-Tools, NDK, CMake)
        shell: bash
        run: |
          set -euo pipefail
          sdkmanager --install \
            "platform-tools" \
            "platforms;android-33" \
            "build-tools;33.0.2" \
            "platforms;android-35" \
            "build-tools;35.0.0" \
            "ndk;27.1.12297006" \
            "cmake;3.22.1"
          yes | sdkmanager --licenses

      - name: Prepare Gradle
        uses: gradle/gradle-build-action@v3

      - name: Make Gradle wrapper executable
        run: chmod +x gradlew

      - name: Ensure libxposed api AAR is present (build from source if missing)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f "app/libs/api-debug.aar" ]; then
            echo "Found existing app/libs/api-debug.aar"
            exit 0
          fi
          echo "api-debug.aar not found; building libxposed/api from source..."
          mkdir -p app/libs
          git clone --depth 1 https://github.com/libxposed/api.git /tmp/libxposed_api
          pushd /tmp/libxposed_api
          chmod +x gradlew
          ./gradlew :api:assemble --stacktrace --no-daemon
          popd
          cp /tmp/libxposed_api/api/build/outputs/aar/api-debug.aar app/libs/api-debug.aar
          ls -l app/libs/api-debug.aar

      - name: Build release APK (unsigned)
        run: ./gradlew clean :app:assembleRelease --stacktrace --no-daemon

      - name: Generate CI keystore (insecure, for CI only)
        shell: bash
        run: |
          set -euo pipefail
          keytool -genkeypair -v \
            -keystore release.keystore \
            -storetype PKCS12 \
            -alias "$KEY_ALIAS" \
            -keyalg RSA \
            -keysize 2048 \
            -validity 10000 \
            -storepass "$KEYSTORE_PASSWORD" \
            -keypass "$KEY_PASSWORD" \
            -dname "CN=FQHelper CI, OU=CI, O=FQHelper, L=Internet, ST=NA, C=US"
          ls -l release.keystore

      - name: Zipalign APK
        shell: bash
        run: |
          set -euo pipefail
          APK_UNSIGNED=$(ls -1 app/build/outputs/apk/release/*-unsigned.apk | head -n 1)
          echo "Found unsigned APK: $APK_UNSIGNED"
          SDK_ROOT=${ANDROID_HOME:-$ANDROID_SDK_ROOT}
          ZIPALIGN="$SDK_ROOT/build-tools/33.0.2/zipalign"
          "$ZIPALIGN" -f -p 4 "$APK_UNSIGNED" app-release-aligned.apk
          ls -l app-release-aligned.apk

      - name: Sign APK
        shell: bash
        run: |
          set -euo pipefail
          SDK_ROOT=${ANDROID_HOME:-$ANDROID_SDK_ROOT}
          APKSIGNER="$SDK_ROOT/build-tools/33.0.2/apksigner"
          "$APKSIGNER" sign \
            --ks release.keystore \
            --ks-pass pass:"$KEYSTORE_PASSWORD" \
            --key-pass pass:"$KEY_PASSWORD" \
            --ks-key-alias "$KEY_ALIAS" \
            --out app-release-signed.apk \
            app-release-aligned.apk
          "$APKSIGNER" verify --print-certs app-release-signed.apk
          ls -l app-release-signed.apk

      - name: Upload signed release APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release-signed-apk
          path: app-release-signed.apk
